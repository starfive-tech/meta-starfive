From c2b33b330c16a97627e987c60a6ca35ed0fdea56 Mon Sep 17 00:00:00 2001
From: Jakub Jelinek <jakub@redhat.com>
Date: Wed, 11 Jan 2023 22:18:42 +0100
Subject: [PATCH 442/547] c: Don't emit DEBUG_BEGIN_STMTs for K&R function
 argument declarations [PR105972]

K&R function parameter declarations are handled by calling
recursively c_parser_declaration_or_fndef in a loop, where each such
call will add_debug_begin_stmt at the start.
Now, if the K&R function definition is not a nested function,
building_stmt_list_p () is false and so we don't emit the DEBUG_BEGIN_STMTs
anywhere, but if it is a nested function, we emit it in the containing
function at the point of the nested function definition.
As the following testcase shows, it can cause ICEs if the containing
function has var-tracking disabled but nested function has them enabled,
as the DEBUG_BEGIN_STMTs are added to the containing function which
shouldn't have them but MAY_HAVE_DEBUG_MARKER_STMTS is checked already
for the nested function, or just wrong experience in the debugger.

The following patch ensures we don't emit any such DEBUG_BEGIN_STMTs for the
K&R function parameter declarations even in nested functions.

2023-01-11  Jakub Jelinek  <jakub@redhat.com>

	PR c/105972
	* c-parser.cc (c_parser_declaration_or_fndef): Disable debug non-bind
	markers for K&R function parameter declarations of nested functions.

	* gcc.dg/pr105972.c: New test.

(cherry picked from commit 23b4ce18379cd336d99d7c71701be28118905b57)
---
 gcc/c/c-parser.cc               |  3 +++
 gcc/testsuite/gcc.dg/pr105972.c | 15 +++++++++++++++
 2 files changed, 18 insertions(+)
 create mode 100644 gcc/testsuite/gcc.dg/pr105972.c

diff --git a/gcc/c/c-parser.cc b/gcc/c/c-parser.cc
index f679d53706a..a21449bb83a 100644
--- a/gcc/c/c-parser.cc
+++ b/gcc/c/c-parser.cc
@@ -2498,10 +2498,13 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
 	 declarator with a nonempty identifier list in a definition;
 	 and postfix attributes have never been accepted here in
 	 function definitions either.  */
+      int save_debug_nonbind_markers_p = debug_nonbind_markers_p;
+      debug_nonbind_markers_p = 0;
       while (c_parser_next_token_is_not (parser, CPP_EOF)
 	     && c_parser_next_token_is_not (parser, CPP_OPEN_BRACE))
 	c_parser_declaration_or_fndef (parser, false, false, false,
 				       true, false);
+      debug_nonbind_markers_p = save_debug_nonbind_markers_p;
       store_parm_decls ();
       if (omp_declare_simd_clauses)
 	c_finish_omp_declare_simd (parser, current_function_decl, NULL_TREE,
diff --git a/gcc/testsuite/gcc.dg/pr105972.c b/gcc/testsuite/gcc.dg/pr105972.c
new file mode 100644
index 00000000000..73f3385f7eb
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr105972.c
@@ -0,0 +1,15 @@
+/* PR c/105972 */
+/* { dg-do compile } */
+/* { dg-options "-O2 -g" } */
+
+__attribute__((optimize (0))) int
+foo (void)
+{
+  int
+  bar (x)
+    int x;
+  {
+    return x;
+  }
+  return bar (0);
+}
-- 
2.25.1

